[{"path":"https://elmer.tidyverse.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 elmer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://elmer.tidyverse.org/articles/streaming-async.html","id":"streaming-results","dir":"Articles","previous_headings":"","what":"Streaming results","title":"Streaming and async APIs","text":"chat() method return results entire response received. (can print streaming results console, returns result response complete.) want process response arrives, can use stream() method. may useful want display response realtime, somewhere R console (like writing file, HTTP response, Shiny chat window); want manipulate response displaying , without giving immediacy streaming. stream() method returns generator coro package, can loop process response arrives.","code":"stream <- chat$stream(\"What are some common uses of R?\") coro::loop(for (chunk in stream) {   cat(toupper(chunk)) }) #>  R IS COMMONLY USED FOR: #> #>  1. **STATISTICAL ANALYSIS**: PERFORMING COMPLEX STATISTICAL TESTS AND ANALYSES. #>  2. **DATA VISUALIZATION**: CREATING GRAPHS, CHARTS, AND PLOTS USING PACKAGES LIKE  GGPLOT2. #>  3. **DATA MANIPULATION**: CLEANING AND TRANSFORMING DATA WITH PACKAGES LIKE DPLYR AND TIDYR. #>  4. **MACHINE LEARNING**: BUILDING PREDICTIVE MODELS WITH LIBRARIES LIKE CARET AND #>  RANDOMFOREST. #>  5. **BIOINFORMATICS**: ANALYZING BIOLOGICAL DATA AND GENOMIC STUDIES. #>  6. **ECONOMETRICS**: PERFORMING ECONOMIC DATA ANALYSIS AND MODELING. #>  7. **REPORTING**: GENERATING DYNAMIC REPORTS AND DASHBOARDS WITH R MARKDOWN. #>  8. **TIME SERIES ANALYSIS**: ANALYZING TEMPORAL DATA AND FORECASTING. #> #>  THESE USES MAKE R A POWERFUL TOOL FOR DATA SCIENTISTS, STATISTICIANS, AND RESEARCHERS."},{"path":"https://elmer.tidyverse.org/articles/streaming-async.html","id":"async-usage","dir":"Articles","previous_headings":"","what":"Async usage","title":"Streaming and async APIs","text":"elmer also supports async usage, useful want run multiple chat sessions concurrently. primarily useful Shiny applications, using methods described block Shiny app users duration response. use async chat, instead chat()/stream(), call chat_async()/stream_async(). _async variants take arguments construction, return promises instead actual response. Remember chat objects stateful, maintaining conversation history interact . Note means doesn’t make sense issue multiple chat/stream operations chat object concurrently, conversation history become corrupted interleaved conversation fragments. need run multiple chat sessions concurrently, create multiple chat objects.","code":""},{"path":"https://elmer.tidyverse.org/articles/streaming-async.html","id":"asynchronous-chat","dir":"Articles","previous_headings":"Async usage","what":"Asynchronous chat","title":"Streaming and async APIs","text":"asynchronous, non-streaming chat, use chat() method , handle result promise instead string. TODO: Shiny example","code":"library(promises)  chat$chat_async(\"How's your day going?\") %...>% print() #> I'm just a computer program, so I don't have feelings, but I'm here to help you with any questions you have."},{"path":"https://elmer.tidyverse.org/articles/streaming-async.html","id":"asynchronous-streaming","dir":"Articles","previous_headings":"Async usage","what":"Asynchronous streaming","title":"Streaming and async APIs","text":"asynchronous streaming, use stream() method , result async generator coro package. regular generator, except instead giving strings, gives promises resolve strings. Async generators advanced, require good understanding asynchronous programming R. also way present streaming results Shiny without blocking users. Fortunately, Shiny soon chat components make easier, can simply hand result stream_async() chat output.","code":"stream <- chat$stream_async(\"What are some common uses of R?\") coro::async(function() {   for (chunk in await_each(stream)) {     cat(toupper(chunk))   } })() #>  R IS COMMONLY USED FOR: #> #>  1. **STATISTICAL ANALYSIS**: PERFORMING VARIOUS STATISTICAL TESTS AND MODELS. #>  2. **DATA VISUALIZATION**: CREATING PLOTS AND GRAPHS TO VISUALIZE DATA. #>  3. **DATA MANIPULATION**: CLEANING AND TRANSFORMING DATA WITH PACKAGES LIKE DPLYR. #>  4. **MACHINE LEARNING**: BUILDING PREDICTIVE MODELS AND ALGORITHMS. #>  5. **BIOINFORMATICS**: ANALYZING BIOLOGICAL DATA, ESPECIALLY IN GENOMICS. #>  6. **TIME SERIES ANALYSIS**: ANALYZING TEMPORAL DATA FOR TRENDS AND FORECASTS. #>  7. **REPORT GENERATION**: CREATING DYNAMIC REPORTS WITH R MARKDOWN. #>  8. **GEOSPATIAL ANALYSIS**: MAPPING AND ANALYZING GEOGRAPHIC DATA."},{"path":"https://elmer.tidyverse.org/articles/structured-data.html","id":"structured-data-basics","dir":"Articles","previous_headings":"","what":"Structured data basics","title":"Structured Data","text":"extract structured data call $extract_data() method instead $chat() method. ’ll also need define type specification describes structure data want (shortly). ’s simple example extracts two specific values string: basic idea works images :","code":"chat <- chat_openai() chat$extract_data(   \"My name is Susan and I'm 13 years old\",   spec = type_object(     age = type_number(),     name = type_string()   ) ) chat$extract_data(   content_image_url(\"https://www.r-project.org/Rlogo.png\"),   spec = type_object(     primary_shape = type_string(),     primary_colour = type_string()   ) )"},{"path":"https://elmer.tidyverse.org/articles/structured-data.html","id":"data-types-basics","dir":"Articles","previous_headings":"","what":"Data types basics","title":"Structured Data","text":"define desired type specification (also known schema), use type_() functions. (might already familiar ’ve done function calling, discussed vignette(\"function-calling\")). type functions can divided three main groups: Scalars represent single values, five types: type_boolean(), type_integer(), type_number(), type_string(), type_enum(), representing single logical, integer, double, string, factor value respectively. Arrays represent number values type created type_array(). must always supply item argument specifies type individual element. Arrays scalars similar R’s atomic vectors: can also arrays arrays arrays objects, closely resemble lists well defined structures: Objects represent collection named values created type_object(). Objects can contain number scalars, arrays, objects. similar named lists R. well definition types, need provide LLM information actually want. purpose first argument, description, string describes data want. good place ask nicely attributes ’ll like value possess (e.g. minimum maximum values, date formats, …). aren’t guaranteed requests honoured, LLM usually make best effort . Now ’ll dive examples coming back talk data types details.","code":"logical <- type_array(items = type_boolean()) integer <- type_array(items = type_integer()) double <- type_array(items = type_number()) character <- type_array(items = type_string()) list_of_intergers <- type_array(items = type_array(items = type_integer())) person <- type_object(   name = type_string(),   age = type_integer(),   hobbies = type_array(items = type_string()) ) person <- type_object(   \"A person\",   name = type_string(\"Name\"),   age = type_integer(\"Age, in years.\"),   hobbies = type_array(\"List of hobbies. Should be exclusive and brief.\", type_string()) )"},{"path":"https://elmer.tidyverse.org/articles/structured-data.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Structured Data","text":"following examples closely inspired Claude documentation hint ways can use structured data extraction.","code":""},{"path":"https://elmer.tidyverse.org/articles/structured-data.html","id":"example-1-article-summarisation","dir":"Articles","previous_headings":"Examples","what":"Example 1: Article summarisation","title":"Structured Data","text":"","code":"text <- readLines(system.file(\"examples/third-party-testing.txt\", package = \"elmer\")) # url <- \"https://www.anthropic.com/news/third-party-testing\" # html <- rvest::read_html(url) # text <- rvest::html_text2(rvest::html_element(html, \"article\"))  article_summary <- type_object(   \"Summary of the article.\",   author = type_string(\"Name of the article author\"),   topics = type_array(     'Array of topics, e.g. [\"tech\", \"politics\"]. Should be as specific as possible, and can overlap.',     type_string(),   ),   summary = type_string(\"Summary of the article. One or two paragraphs max\"),   coherence = type_integer(\"Coherence of the article's key points, 0-100 (inclusive)\"),   persuasion = type_number(\"Article's persuasion score, 0.0-1.0 (inclusive)\") )  chat <- chat_openai() data <- chat$extract_data(text, spec = article_summary) cat(data$summary)  str(data)"},{"path":"https://elmer.tidyverse.org/articles/structured-data.html","id":"example-2-named-entity-recognition","dir":"Articles","previous_headings":"Examples","what":"Example 2: Named entity recognition","title":"Structured Data","text":"","code":"text <- \"John works at Google in New York. He met with Sarah, the CEO of Acme Inc., last week in San Francisco.\"  named_entities <- type_object(   \"named entities\",   entities = type_array(     \"Array of named entities\",     type_object(       name = type_string(\"The extracted entity name.\"),       type = type_enum(\"The entity type\", c(\"person\", \"location\", \"organization\")),       context = type_string(\"The context in which the entity appears in the text.\")     )   ) )  chat <- chat_openai() str(chat$extract_data(text, spec = named_entities))"},{"path":"https://elmer.tidyverse.org/articles/structured-data.html","id":"example-3-sentiment-analysis","dir":"Articles","previous_headings":"Examples","what":"Example 3: Sentiment analysis","title":"Structured Data","text":"Note ’ve asked nicely scores sum 1, example (least ran code), ’s guaranteed.","code":"text <- \"The product was okay, but the customer service was terrible. I probably won't buy from them again.\"  sentiment <- type_object(   \"Extract the sentiment scores of a given text. Sentiment scores should sum to 1.\",   positive_score = type_number(\"Positive sentiment score, ranging from 0.0 to 1.0.\"),   negative_score = type_number(\"Negative sentiment score, ranging from 0.0 to 1.0.\"),   neutral_score = type_number(\"Neutral sentiment score, ranging from 0.0 to 1.0.\") )  chat <- chat_openai() str(chat$extract_data(text, spec = sentiment))"},{"path":"https://elmer.tidyverse.org/articles/structured-data.html","id":"example-4-text-classification","dir":"Articles","previous_headings":"Examples","what":"Example 4: Text classification","title":"Structured Data","text":"created wrapper object OpenAI API requires structured data use object. ’re working Claude Gemini, code little simpler:","code":"text <- \"The new quantum computing breakthrough could revolutionize the tech industry.\"  classification <- type_array(   \"Array of classification results. The scores should sum to 1.\",   type_object(     name = type_enum(       \"The category name\",       values = c(         \"Politics\",         \"Sports\",         \"Technology\",         \"Entertainment\",         \"Business\",         \"Other\"       )     ),     score = type_number(       \"The classification score for the category, ranging from 0.0 to 1.0.\"     )   ) ) wrapper <- type_object(   classification = classification )  chat <- chat_openai() data <- chat$extract_data(text, spec = wrapper) do.call(rbind, lapply(data$classification, as.data.frame)) chat <- chat_claude() data <- chat$extract_data(text, spec = classification) do.call(rbind, lapply(data, as.data.frame))"},{"path":"https://elmer.tidyverse.org/articles/structured-data.html","id":"example-5-working-with-unknown-keys","dir":"Articles","previous_headings":"Examples","what":"Example 5: Working with unknown keys","title":"Structured Data","text":"examples works Claude, GPT Gemini, Claude supports adding arbitrary additional properties.","code":"characteristics <- type_object(   \"All characteristics\",   .additional_properties = TRUE )  prompt <- \"   Given a description of a character, your task is to extract all the characteristics of that character.    <description>   The man is tall, with a beard and a scar on his left cheek. He has a deep voice and wears a black leather jacket.   <\/description> \"  chat <- chat_claude() str(chat$extract_data(prompt, spec = characteristics))"},{"path":"https://elmer.tidyverse.org/articles/structured-data.html","id":"example-6-extracting-data-from-an-image","dir":"Articles","previous_headings":"Examples","what":"Example 6: Extracting data from an image","title":"Structured Data","text":"example comes Dan Nguyen can see interesting applications link. goal extract structured data screenshot: Even without descriptions, ChatGPT pretty well:","code":"asset <- type_object(   assert_name = type_string(),   owner = type_string(),   location = type_string(),   asset_value_low = type_integer(),   asset_value_high = type_integer(),   income_type = type_string(),   income_low = type_integer(),   income_high = type_integer(),   tx_gt_1000 = type_boolean() ) disclosure_report <- type_object(   assets = type_array(items = asset) )  chat <- chat_openai() image <- content_image_file(\"congressional-assets.png\") data <- chat$extract_data(image, spec = disclosure_report) str(data)"},{"path":"https://elmer.tidyverse.org/articles/structured-data.html","id":"advanced-data-types","dir":"Articles","previous_headings":"","what":"Advanced data types","title":"Structured Data","text":"Now ’ve seen examples, ’s time get specifics data type declarations.","code":""},{"path":"https://elmer.tidyverse.org/articles/structured-data.html","id":"required-vs-optional","dir":"Articles","previous_headings":"Advanced data types","what":"Required vs optional","title":"Structured Data","text":"default, components object required. want make optional, set required = FALSE. good idea don’t think text always contain required fields LLMs may hallucinate data order fulfill spec. example, LLM hallucinates date even though isn’t one text: Note ’ve used explict prompt . example, found generated better results, ’s useful place put additional instructions. let LLM know fields optional, ’ll instead return NULL missing fields:","code":"article_spec <- type_object(   \"Information about an article written in markdown\",   title = type_string(\"Article title\"),   author = type_string(\"Name of the author\"),   date = type_string(\"Date written in YYYY-MM-DD format.\") )  prompt <- \"   Extract data from the following text:    <text>   # Structured Data   By Hadley Wickham    When using an LLM to extract data from text or images, you can ask the chatbot to nicely format it, in JSON or any other format that you like.   <\/text> \"  chat <- chat_openai() chat$extract_data(prompt, spec = article_spec) str(data) article_spec <- type_object(   \"Information about an article written in markdown\",   title = type_string(\"Article title\", required = FALSE),   author = type_string(\"Name of the author\", required = FALSE),   date = type_string(\"Date written in YYYY-MM-DD format.\", required = FALSE) ) chat$extract_data(prompt, spec = article_spec)"},{"path":"https://elmer.tidyverse.org/articles/structured-data.html","id":"data-frames","dir":"Articles","previous_headings":"Advanced data types","what":"Data frames","title":"Structured Data","text":"want define data frame like object, might tempted create definition similar R uses: object (.e. named list) containing multiple vectors (.e. arrays): however, quite right becuase ’s way specify array length. Instead need turn data structure “inside ”, instead create array objects: ’re familiar terms row-oriented column-oriented data frames, idea. Since language don’t possess vectorisation like R, row-oriented structures tend much common wild. ’re working OpenAI, ’ll need wrap dummy object OpenAI requires structured data extraction. See Example 4 concrete example.","code":"my_df_type <- type_object(   name = type_array(items = type_string()),   age = type_array(items = type_integer()),   height = type_array(items = type_number()),   weight = type_array(items = type_number()) ) my_df_type <- type_array(   items = type_object(     name = type_string(),     age = type_integer(),     height = type_number(),     weight = type_number()   ) )"},{"path":[]},{"path":"https://elmer.tidyverse.org/articles/tool-calling.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tool calling (a.k.a. function calling)","text":"One interesting aspects modern chat models ability make use external tools defined caller. making chat request chat model, caller advertises one tools (defined function name, description, list expected arguments), chat model can choose respond one “tool calls”. tool calls requests chat model caller execute function given arguments; caller expected execute functions “return” results submitting another chat request conversation far, plus results. chat model can use results formulating response, , may decide make additional tool calls. Note chat model directly execute external tools! makes requests caller execute . value chat model brings helping execution, knowing makes sense call tool, values pass arguments, use results formulating response.","code":"library(elmer)"},{"path":"https://elmer.tidyverse.org/articles/tool-calling.html","id":"motivating-example","dir":"Articles","previous_headings":"Introduction","what":"Motivating example","title":"Tool calling (a.k.a. function calling)","text":"Let’s take look example really need external tool. Chat models generally know current time, makes questions like impossible. Unfortunately, example run September 18, 2024. Let’s give chat model ability determine current time try .","code":"chat <- chat_openai(model = \"gpt-4o\") chat$chat(\"How long ago exactly was the moment Neil Armstrong touched down on the moon?\") #> Neil Armstrong touched down on the moon on July 20, 1969, at 20:17 UTC. To determine how long ago that #> was from the current year of 2023, we can calculate the difference in years, months, and days. #> #> From July 20, 1969, to July 20, 2023, is exactly 54 years. If today's date is after July 20, 2023, you #> would add the additional time since then. If it is before, you would consider slightly less than 54 #> years. #> #> As of right now, can you confirm the current date so we can calculate the precise duration?"},{"path":"https://elmer.tidyverse.org/articles/tool-calling.html","id":"defining-a-tool-function","dir":"Articles","previous_headings":"Introduction","what":"Defining a tool function","title":"Tool calling (a.k.a. function calling)","text":"first thing ’ll define R function returns current time. tool. Note ’ve gone trouble creating roxygen2 comments. important step help model use tool correctly! Let’s test :","code":"#' Gets the current time in the given time zone. #' #' @param tz The time zone to get the current time in. #' @return The current time in the given time zone. get_current_time <- function(tz = \"UTC\") {   format(Sys.time(), tz = tz, usetz = TRUE) } get_current_time() #> [1] \"2024-09-18 17:47:14 UTC\""},{"path":"https://elmer.tidyverse.org/articles/tool-calling.html","id":"registering-tools","dir":"Articles","previous_headings":"Introduction","what":"Registering tools","title":"Tool calling (a.k.a. function calling)","text":"Now need tell chat object get_current_time function. creating registering tool: fair amount code write, even simple function get_current_time. Fortunately, don’t write hand! generated register_tool call calling create_tool_metadata(get_current_time), printed code console. create_tool_metadata() works passing function’s signature documentation GPT-4o, asking generate register_tool call . Note create_tool_metadata() may create perfect results, must review generated code using . huge time-saver nonetheless, removes tedious boilerplate generation ’d otherwise.","code":"chat <- chat_openai(model = \"gpt-4o\")  chat$register_tool(tool(   get_current_time,   \"Gets the current time in the given time zone.\",   tz = type_string(     \"The time zone to get the current time in. Defaults to `\\\"UTC\\\"`.\",     required = FALSE   ) ))"},{"path":"https://elmer.tidyverse.org/articles/tool-calling.html","id":"using-the-tool","dir":"Articles","previous_headings":"Introduction","what":"Using the tool","title":"Tool calling (a.k.a. function calling)","text":"’s need ! Let’s retry query: ’s correct! Without guidance, chat model decided call tool function successfully used result formulating response. (Full disclosure: originally tried example default model gpt-4o-mini got tool calling right date math wrong, hence explicit model=\"gpt-4o\".) tool example extremely simple, can imagine much interesting things tool functions: calling APIs, reading writing database, kicking complex simulation, even calling complementary GenAI model (like image generator). using elmer Shiny app, use tools set reactive values, setting chain reactive updates.","code":"chat$chat(\"How long ago exactly was the moment Neil Armstrong touched down on the moon?\") #> Neil Armstrong touched down on the moon on July 20, 1969, at 20:17 UTC. #> #> To calculate the time elapsed from that moment until the current time (September 18, 2024, 17:47:19 #> UTC), we need to break it down. #> #> 1. From July 20, 1969, 20:17 UTC to July 20, 2024, 20:17 UTC is exactly 55 years. #> 2. From July 20, 2024, 20:17 UTC to September 18, 2024, 17:47:19 UTC, we need to further break down: #> #>    - From July 20, 2024, 20:17 UTC to September 18, 2024, 17:47:19 UTC, which is: #>      - 1 full month (August) #>      - 30 – 20 = 10 days of July #>      - 18 days of September until 17:47:19 UTC #> #> So, in detail: #>    - 55 years #>    - 1 month #>    - 28 days #>    - From July 20, 2024, 20:17 UTC to July 20, 2024, 17:47:19 UTC: 23 hours, 30 minutes, and 19 seconds #> #> Time Total: #> - 55 years #> - 1 month #> - 28 days #> - 23 hours #> - 30 minutes #> - 19 seconds #> #> This is the exact time that has elapsed since Neil Armstrong's historic touchdown on the moon."},{"path":"https://elmer.tidyverse.org/articles/tool-calling.html","id":"tool-limitations","dir":"Articles","previous_headings":"Introduction","what":"Tool limitations","title":"Tool calling (a.k.a. function calling)","text":"Remember tool arguments come chat model, tool results returned chat model. means simple, {jsonlite} compatible data types can used inputs outputs. ’s highly recommended stick strings/character, numbers, booleans/logical, null, named unnamed lists types. can forget using functions, environments, external pointers, R6 classes, complex R objects arguments return values. Returning data frames seems work OK, although careful return much data, counts tokens (.e., count context window limit also cost money).","code":""},{"path":"https://elmer.tidyverse.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://elmer.tidyverse.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wickham H (2024). elmer: Call LLM APIs R. R package version 0.0.0.9000, https://github.com/tidyverse/elmer, https://elmer.tidyverse.org.","code":"@Manual{,   title = {elmer: Call LLM APIs from R},   author = {Hadley Wickham},   year = {2024},   note = {R package version 0.0.0.9000, https://github.com/tidyverse/elmer},   url = {https://elmer.tidyverse.org}, }"},{"path":"https://elmer.tidyverse.org/index.html","id":"elmer-","dir":"","previous_headings":"","what":"Call LLM APIs from R","title":"Call LLM APIs from R","text":"goal elmer provide user friendly wrapper common llm providers. Major design goals include support streaming making easy register call R functions. (Looking something similar elmer python? Check chatlas!)","code":""},{"path":"https://elmer.tidyverse.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Call LLM APIs from R","text":"can install development version elmer GitHub :","code":"# install.packages(\"pak\") pak::pak(\"tidyverse/elmer\")"},{"path":"https://elmer.tidyverse.org/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Call LLM APIs from R","text":"Depending backend use, ’ll need set appropriate environment variable ~/.Renviron (easy way open file call usethis::edit_r_environ()): chat_claude(), set ANTHROPIC_API_KEY using key https://console.anthropic.com/account/keys. chat_gemini(), set GOOGLE_API_KEY using key https://aistudio.google.com/app/apikey. chat_openai() set OPENAI_API_KEY using key https://platform.openai.com/account/api-keys.","code":""},{"path":"https://elmer.tidyverse.org/index.html","id":"using-elmer","dir":"","previous_headings":"","what":"Using elmer","title":"Call LLM APIs from R","text":"chat elmer several different ways, depending whether working interactively programmatically. start creating new chat object: Chat objects stateful: retain context conversation, new query can build previous ones. true regardless various ways chatting use.","code":"library(elmer)  chat <- chat_openai(   model = \"gpt-4o-mini\",   system_prompt = \"You are a friendly but terse assistant.\",   echo = TRUE )"},{"path":"https://elmer.tidyverse.org/index.html","id":"interactive-chat-console","dir":"","previous_headings":"Using elmer","what":"Interactive chat console","title":"Call LLM APIs from R","text":"interactive, least programmatic way using elmer chat directly R console live_console(chat) browser live_browser(). chat console useful quickly exploring capabilities model, especially ’ve customized chat object tool integrations (see ). , keep mind chat object retains state, enter chat console, previous interactions chat object still part conversation, interactions chat console persist even exit back R prompt.","code":"live_console(chat) #> ╔════════════════════════════════════════════════════════╗ #> ║  Entering chat console. Use \"\"\" for multi-line input.  ║ #> ║  Press Ctrl+C to quit.                                 ║ #> ╚════════════════════════════════════════════════════════╝ #> >>> Who were the original creators of R? #> R was originally created by Ross Ihaka and Robert Gentleman at the University of #> Auckland, New Zealand. #> #> >>> When was that? #> R was initially released in 1995. Development began a few years prior to that, #> in the early 1990s."},{"path":"https://elmer.tidyverse.org/index.html","id":"interactive-method-call","dir":"","previous_headings":"Using elmer","what":"Interactive method call","title":"Call LLM APIs from R","text":"second interactive way chat using elmer call chat() method. initialize chat object echo = TRUE, , chat method streams response console arrives. entire response received, returned character vector (invisibly, ’s printed twice). mode useful want see response arrives, don’t want enter chat console.","code":"chat$chat(\"What preceding languages most influenced R?\") #> R was primarily influenced by the S programming language, particularly S-PLUS. #> Other languages that had an impact include Scheme and various data analysis #> languages."},{"path":"https://elmer.tidyverse.org/index.html","id":"vision-image-input","dir":"","previous_headings":"Using elmer > Interactive method call","what":"Vision (image input)","title":"Call LLM APIs from R","text":"want ask question image, can pass one additional input arguments using content_image_file() /content_image_url(). content_image_url function takes URL image file sends URL directly API. content_image_file function takes path local image file encodes base64 string send API. Note default, content_image_file automatically resizes image fit within 512x512 pixels; set resize parameter \"high\" higher resolution needed.","code":"chat$chat(   content_image_url(\"https://www.r-project.org/Rlogo.png\"),   \"Can you explain this logo?\" ) #> The logo of R features a stylized letter \"R\" in blue, enclosed in an oval shape that resembles the letter \"O,\" #> signifying the programming language's name. The design conveys a modern and professional look, reflecting its use #> in statistical computing and data analysis. The blue color often represents trust and reliability, which aligns #> with R's role in data science."},{"path":"https://elmer.tidyverse.org/index.html","id":"programmatic-chat","dir":"","previous_headings":"Using elmer","what":"Programmatic chat","title":"Call LLM APIs from R","text":"don’t want see response arrives, can turn echoing leaving echo = TRUE argument chat_openai(). mode useful programming using elmer, result either intended human consumption want process response displaying .","code":"chat <- chat_openai(   model = \"gpt-4o-mini\",   system_prompt = \"You are a friendly but terse assistant.\" ) chat$chat(\"Is R a functional programming language?\") #> [1] \"Yes, R supports functional programming concepts. It allows functions to be first-class objects, supports higher-order functions, and encourages the use of functions as core components of code. However, it also supports procedural and object-oriented programming styles.\""},{"path":"https://elmer.tidyverse.org/index.html","id":"learning-more","dir":"","previous_headings":"","what":"Learning more","title":"Call LLM APIs from R","text":"Learn streaming async APIs vignette(\"streaming-async\"). Learn tool calling (aka function calling) vignette(\"tool-calling\"). Learn extract structured data vignette(\"structured-data\").","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":null,"dir":"Reference","previous_headings":"","what":"A chat — Chat","title":"A chat — Chat","text":"Chat sequence sequence user assistant Turns sent specific Provider. Chat mutable R6 object takes care managing state associated chat; .e. records messages send server, messages receive back. register tool (.e. R function assistant can call behalf), also takes care tool loop. generally create object , instead call chat_openai() friends instead.","code":""},{"path":[]},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"A chat — Chat","text":"Chat$new() Chat$get_turns() Chat$set_turns() Chat$get_system_prompt() Chat$set_system_prompt() Chat$tokens() Chat$last_turn() Chat$chat() Chat$extract_data() Chat$extract_data_async() Chat$chat_async() Chat$stream() Chat$stream_async() Chat$register_tool() Chat$clone()","code":""},{"path":[]},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$new(provider, turns, seed = NULL, echo = \"none\")"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"provider provider object. turns unnamed list turns start chat (.e., continuing previous conversation). NULL zero-length list, conversation begins scratch. seed Optional integer seed ChatGPT uses try make output reproducible. echo One following options: none: emit output (default running function). text: echo text output streams (default running console). : echo input output. Note affects chat() method.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-get-turns-","dir":"Reference","previous_headings":"","what":"Method get_turns()","title":"A chat — Chat","text":"Retrieve turns sent received far (optionally starting system prompt, ).","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$get_turns(include_system_prompt = FALSE)"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"include_system_prompt Whether include system prompt turns (exists).","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-set-turns-","dir":"Reference","previous_headings":"","what":"Method set_turns()","title":"A chat — Chat","text":"Replace existing turns new list.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$set_turns(value)"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"value list Turns.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-get-system-prompt-","dir":"Reference","previous_headings":"","what":"Method get_system_prompt()","title":"A chat — Chat","text":"set, system prompt, , NULL.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$get_system_prompt()"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-set-system-prompt-","dir":"Reference","previous_headings":"","what":"Method set_system_prompt()","title":"A chat — Chat","text":"Update system prompt","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$set_system_prompt(value)"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"value string giving new system prompt","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-tokens-","dir":"Reference","previous_headings":"","what":"Method tokens()","title":"A chat — Chat","text":"List number tokens consumed assistant turn. Currently tokens recorded assistant turns ; user turns zeros.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$tokens()"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-last-turn-","dir":"Reference","previous_headings":"","what":"Method last_turn()","title":"A chat — Chat","text":"last turn returned assistant.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$last_turn(role = c(\"assistant\", \"user\", \"system\"))"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"role Optionally, specify role find last turn role.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"A chat — Chat","text":"Either Turn NULL, turns specified role occurred.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-chat-","dir":"Reference","previous_headings":"","what":"Method chat()","title":"A chat — Chat","text":"Submit input chatbot, return response simple string (probably Markdown).","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$chat(..., echo = NULL)"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"... input send chatbot. Can strings images (see content_image_file() content_image_url(). echo Whether emit response stdout received. NULL, value echo set chat object created used.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-extract-data-","dir":"Reference","previous_headings":"","what":"Method extract_data()","title":"A chat — Chat","text":"Extract structured data","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$extract_data(..., spec, echo = \"none\")"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"... input send chatbot. typically include phrase \"extract structured data\". spec type specification extracted data. created type_() function. echo Whether emit response stdout received. Set \"text\" stream JSON data generated (supported providers).","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-extract-data-async-","dir":"Reference","previous_headings":"","what":"Method extract_data_async()","title":"A chat — Chat","text":"Extract structured data, asynchronously. Returns promise resolves object matching type specification.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$extract_data_async(..., spec, echo = \"none\")"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"... input send chatbot. typically include phrase \"extract structured data\". spec type specification extracted data. created type_() function. echo Whether emit response stdout received. Set \"text\" stream JSON data generated (supported providers).","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-chat-async-","dir":"Reference","previous_headings":"","what":"Method chat_async()","title":"A chat — Chat","text":"Submit input chatbot, receive promise resolves response . Returns promise resolves string (probably Markdown).","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$chat_async(...)"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"... input send chatbot. Can strings images.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-stream-","dir":"Reference","previous_headings":"","what":"Method stream()","title":"A chat — Chat","text":"Submit input chatbot, returning streaming results. Returns coro generator yields strings. iterating, generator block waiting content chatbot.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$stream(...)"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"... input send chatbot. Can strings images.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-stream-async-","dir":"Reference","previous_headings":"","what":"Method stream_async()","title":"A chat — Chat","text":"Submit input chatbot, returning asynchronously streaming results. Returns coro async generator yields string promises.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$stream_async(...)"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"... input send chatbot. Can strings images.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-register-tool-","dir":"Reference","previous_headings":"","what":"Method register_tool()","title":"A chat — Chat","text":"Register tool (R function) chatbot can use. chatbot decides use function,  elmer automatically call submit results back.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$register_tool(tool_def)"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"tool_def Tool definition created tool().","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"A chat — Chat","text":"objects class cloneable method.","code":""},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"A chat — Chat","text":"","code":"Chat$clone(deep = FALSE)"},{"path":"https://elmer.tidyverse.org/reference/Chat.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chat — Chat","text":"deep Whether make deep clone.","code":""},{"path":"https://elmer.tidyverse.org/reference/Content.html","id":null,"dir":"Reference","previous_headings":"","what":"Content types received from and sent to a chatbot — Content","title":"Content types received from and sent to a chatbot — Content","text":"elmer abstracts away differences way different Providers represent various types content, allowing easily write code works chatbot. set classes represents various types content can sent received provider: ContentText: simple text (often markdown format). type content can streamed live received. ContentImageRemote ContentImageInline: images, either pointer remote URL included inline object. See content_image_file() friends convenient ways construct objects. ContentToolRequest: request perform tool call (sent assistant). ContentToolResult: result calling tool (sent user).","code":""},{"path":"https://elmer.tidyverse.org/reference/Content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Content types received from and sent to a chatbot — Content","text":"","code":"Content()  ContentText(text = character(0))  ContentImage()  ContentImageRemote(url = character(0), detail = character(0))  ContentImageInline(type = character(0), data = NULL)  ContentToolRequest(id = character(0), name = character(0), arguments = list())  ContentToolResult(id = character(0), value = NULL, error = NULL)"},{"path":"https://elmer.tidyverse.org/reference/Content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Content types received from and sent to a chatbot — Content","text":"text single string. url URL remote image. detail currently used. type MIME type image. data Base64 encoded image data. id Tool call id (used associate request result) name Function name arguments Named list arguments call function . value, error Either results calling function succeeded, otherwise error message, string. One value error always NULL.","code":""},{"path":"https://elmer.tidyverse.org/reference/Provider.html","id":null,"dir":"Reference","previous_headings":"","what":"A chatbot provider — Provider","title":"A chatbot provider — Provider","text":"Provider captures details one chatbot service/API. captures API works, details underlying large language model. Different providers might offer (open source) model behind different API.","code":""},{"path":"https://elmer.tidyverse.org/reference/Provider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A chatbot provider — Provider","text":"","code":"Provider(base_url = character(0), extra_args = list())"},{"path":"https://elmer.tidyverse.org/reference/Provider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A chatbot provider — Provider","text":"base_url base URL API. extra_args Arbitrary extra arguments included request body.","code":""},{"path":"https://elmer.tidyverse.org/reference/Provider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A chatbot provider — Provider","text":"add support new backend, need subclass Provider (adding additional fields provider needs) implement various generics control behavior provider.","code":""},{"path":"https://elmer.tidyverse.org/reference/Turn.html","id":null,"dir":"Reference","previous_headings":"","what":"A user or assistant turn — Turn","title":"A user or assistant turn — Turn","text":"Every conversation chatbot consists pairs user assistant turns, corresponding HTTP request response. turns represented Turn object, contains list Contents representing individual messages within turn. might text, images, tool requests (assistant ), tool responses (user ). Note call $chat() related functions may result multiple user-assistant turn cycles. example, registered tools, elmer automatically handle tool calling loop, may result number additional cycles. Learn tool calling vignette(\"tool-calling\").","code":""},{"path":"https://elmer.tidyverse.org/reference/Turn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A user or assistant turn — Turn","text":"","code":"Turn(role, contents = list(), json = list(), tokens = c(0, 0))"},{"path":"https://elmer.tidyverse.org/reference/Turn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A user or assistant turn — Turn","text":"role Either \"user\", \"assistant\", \"system\". contents list Content objects. json serialized JSON corresponding underlying data turns. Currently provided assistant. useful information returned provider elmer otherwise expose. tokens numeric vector length 2 representing number input output tokens (respectively) used turn. Currently recorded assistant turns.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_azure.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat with a model hosted on Azure OpenAI — chat_azure","title":"Chat with a model hosted on Azure OpenAI — chat_azure","text":"Azure OpenAI server hosts number open source models well proprietary models OpenAI.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_azure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat with a model hosted on Azure OpenAI — chat_azure","text":"","code":"chat_azure(   endpoint = azure_endpoint(),   deployment_id,   api_version = NULL,   system_prompt = NULL,   turns = NULL,   api_key = azure_key(),   token = NULL,   api_args = list(),   echo = c(\"none\", \"text\", \"all\") )"},{"path":"https://elmer.tidyverse.org/reference/chat_azure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat with a model hosted on Azure OpenAI — chat_azure","text":"endpoint Azure OpenAI endpoint url protocol hostname, .e. https://{-resource-name}.openai.azure.com. Defaults using value AZURE_OPENAI_ENDPOINT envinronment variable. deployment_id Deployment id model want use. api_version API version use. system_prompt system prompt set behavior assistant. turns list Turns start chat (.e., continuing previous conversation). provided, conversation begins scratch. api_key API key use authentication. generally supply directly, instead set AZURE_OPENAI_API_KEY environment variable. token Azure token authentication. typically required Azure OpenAI API calls, can used setup requires . api_args Named list arbitrary extra arguments appended body every chat API call. echo One following options: none: emit output (default running function). text: echo text output streams (default running console). : echo input output. Note affects chat() method.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_azure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chat with a model hosted on Azure OpenAI — chat_azure","text":"Chat object.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_bedrock.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat with an AWS bedrock model — chat_bedrock","title":"Chat with an AWS bedrock model — chat_bedrock","text":"AWS Bedrock provides number chat based models, including Anthropic's Claude. Authenthication handled {paws.common}, authenthication work automatically, need follow advice https://www.paws-r-sdk.com/#credentials. particular, org uses AWS SSO, need run aws sso login terminal.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_bedrock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat with an AWS bedrock model — chat_bedrock","text":"","code":"chat_bedrock(   system_prompt = NULL,   turns = NULL,   model = NULL,   profile = NULL,   echo = NULL )"},{"path":"https://elmer.tidyverse.org/reference/chat_bedrock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat with an AWS bedrock model — chat_bedrock","text":"system_prompt system prompt set behavior assistant. turns list Turns start chat (.e., continuing previous conversation). provided, conversation begins scratch. model model use chat. default, NULL, pick reasonable default, tell . strongly recommend explicitly choosing model casual use. profile AWS profile use. echo One following options: none: emit output (default running function). text: echo text output streams (default running console). : echo input output. Note affects chat() method.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_bedrock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chat with an AWS bedrock model — chat_bedrock","text":"Chat object.","code":""},{"path":[]},{"path":"https://elmer.tidyverse.org/reference/chat_claude.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat with an Anthropic Claude model — chat_claude","title":"Chat with an Anthropic Claude model — chat_claude","text":"Anthropic provides number chat based models Claude moniker. Note Claude Prop membership give ability call models via API. need go developer console sign (pay ) developer account give API key can use package.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_claude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat with an Anthropic Claude model — chat_claude","text":"","code":"chat_claude(   system_prompt = NULL,   turns = NULL,   max_tokens = 4096,   model = NULL,   api_args = list(),   base_url = \"https://api.anthropic.com/v1\",   api_key = anthropic_key(),   echo = NULL )"},{"path":"https://elmer.tidyverse.org/reference/chat_claude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat with an Anthropic Claude model — chat_claude","text":"system_prompt system prompt set behavior assistant. turns list Turns start chat (.e., continuing previous conversation). provided, conversation begins scratch. max_tokens Maximum number tokens generate stopping. model model use chat. default, NULL, pick reasonable default, tell . strongly recommend explicitly choosing model casual use. api_args Named list arbitrary extra arguments appended body every chat API call. base_url base URL endpoint; default uses OpenAI. api_key API key use authentication. generally supply directly, instead set ANTHROPIC_API_KEY environment variable. echo One following options: none: emit output (default running function). text: echo text output streams (default running console). : echo input output. Note affects chat() method.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_claude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chat with an Anthropic Claude model — chat_claude","text":"Chat object.","code":""},{"path":[]},{"path":"https://elmer.tidyverse.org/reference/chat_cortex.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a chatbot that speaks to the Snowflake Cortex Analyst — chat_cortex","title":"Create a chatbot that speaks to the Snowflake Cortex Analyst — chat_cortex","text":"Chat LLM-powered Snowflake Cortex Analyst. Unlike comparable model APIs, Cortex take system prompt. Instead, caller must provide \"semantic model\" describing available tables, meaning, verified queries can run starting point. semantic model can passed YAML string via reference existing file Snowflake Stage. Note Cortex support multi-turn, remember previous messages. support registering tools, attempting result error.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_cortex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a chatbot that speaks to the Snowflake Cortex Analyst — chat_cortex","text":"","code":"chat_cortex(   account = Sys.getenv(\"SNOWFLAKE_ACCOUNT\"),   credentials = cortex_credentials,   model_spec = NULL,   model_file = NULL,   api_args = list(),   echo = c(\"none\", \"text\", \"all\") )  cortex_credentials(account = Sys.getenv(\"SNOWFLAKE_ACCOUNT\"))"},{"path":"https://elmer.tidyverse.org/reference/chat_cortex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a chatbot that speaks to the Snowflake Cortex Analyst — chat_cortex","text":"account Snowflake account identifier, e.g. \"testorg-test_account\". credentials list authentication headers pass httr2::req_headers() function returns passed account parameter. default cortex_credentials() function picks ambient Snowflake OAuth key-pair authentication credentials handles refreshing automatically. model_spec semantic model specification, NULL using model_file instead. model_file Path semantic model file stored Snowflake Stage, NULL using model_spec instead. api_args Named list arbitrary extra arguments appended body every chat API call. echo One following options: none: emit output (default running function). text: echo text output streams (default running console). : echo input output. Note affects chat() method.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_cortex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a chatbot that speaks to the Snowflake Cortex Analyst — chat_cortex","text":"Chat object.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_cortex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a chatbot that speaks to the Snowflake Cortex Analyst — chat_cortex","text":"cortex_credentials() picks following ambient Snowflake credentials: static OAuth token defined via SNOWFLAKE_TOKEN environment variable. Key-pair authentication credentials defined via SNOWFLAKE_USER SNOWFLAKE_PRIVATE_KEY (can PEM-encoded private key path one) environment variables. Posit Workbench-managed Snowflake credentials corresponding account.","code":""},{"path":[]},{"path":"https://elmer.tidyverse.org/reference/chat_cortex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a chatbot that speaks to the Snowflake Cortex Analyst — chat_cortex","text":"","code":"if (FALSE) { # elmer:::cortex_credentials_exist() chat <- chat_cortex(   model_file = \"@my_db.my_schema.my_stage/model.yaml\" ) chat$chat(\"What questions can I ask?\") }"},{"path":"https://elmer.tidyverse.org/reference/chat_gemini.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat with a Google Gemini model — chat_gemini","title":"Chat with a Google Gemini model — chat_gemini","text":"Chat Google Gemini model","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_gemini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat with a Google Gemini model — chat_gemini","text":"","code":"chat_gemini(   system_prompt = NULL,   turns = NULL,   base_url = \"https://generativelanguage.googleapis.com/v1beta/\",   api_key = gemini_key(),   model = NULL,   api_args = list(),   echo = NULL )"},{"path":"https://elmer.tidyverse.org/reference/chat_gemini.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat with a Google Gemini model — chat_gemini","text":"system_prompt system prompt set behavior assistant. turns list Turns start chat (.e., continuing previous conversation). provided, conversation begins scratch. base_url base URL endpoint; default uses OpenAI. api_key API key use authentication. generally supply directly, instead set GOOGLE_API_KEY environment variable. model model use chat. default, NULL, pick reasonable default, tell . strongly recommend explicitly choosing model casual use. api_args Named list arbitrary extra arguments appended body every chat API call. echo One following options: none: emit output (default running function). text: echo text output streams (default running console). : echo input output. Note affects chat() method.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_gemini.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chat with a Google Gemini model — chat_gemini","text":"Chat object.","code":""},{"path":[]},{"path":"https://elmer.tidyverse.org/reference/chat_github.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat with a model hosted on the GitHub model marketplace — chat_github","title":"Chat with a model hosted on the GitHub model marketplace — chat_github","text":"GitHub (via Azure) hosts number open source OpenAI models. access GitHub model marketplace, need apply accepted beta access program. See https://github.com/marketplace/models details. function lightweight wrapper around chat_openai() defaults tweaked GitHub model marketplace.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_github.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat with a model hosted on the GitHub model marketplace — chat_github","text":"","code":"chat_github(   system_prompt = NULL,   turns = NULL,   base_url = \"https://models.inference.ai.azure.com/\",   api_key = github_key(),   model = NULL,   seed = NULL,   api_args = list(),   echo = NULL )"},{"path":"https://elmer.tidyverse.org/reference/chat_github.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat with a model hosted on the GitHub model marketplace — chat_github","text":"system_prompt system prompt set behavior assistant. turns list Turns start chat (.e., continuing previous conversation). provided, conversation begins scratch. base_url base URL endpoint; default uses OpenAI. api_key API key use authentication. generally supply directly, instead manage GitHub credentials described https://usethis.r-lib.org/articles/git-credentials.html. model model use chat. default, NULL, pick reasonable default, tell . strongly recommend explicitly choosing model casual use. seed Optional integer seed ChatGPT uses try make output reproducible. api_args Named list arbitrary extra arguments appended body every chat API call. echo One following options: none: emit output (default running function). text: echo text output streams (default running console). : echo input output. Note affects chat() method.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_github.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chat with a model hosted on the GitHub model marketplace — chat_github","text":"Chat object.","code":""},{"path":[]},{"path":"https://elmer.tidyverse.org/reference/chat_groq.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat with a model hosted on Groq — chat_groq","title":"Chat with a model hosted on Groq — chat_groq","text":"Sign https://groq.com. function lightweight wrapper around chat_openai() defaults tweaked groq.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_groq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat with a model hosted on Groq — chat_groq","text":"","code":"chat_groq(   system_prompt = NULL,   turns = NULL,   base_url = \"https://api.groq.com/openai/v1\",   api_key = groq_key(),   model = NULL,   seed = NULL,   api_args = list(),   echo = NULL )"},{"path":"https://elmer.tidyverse.org/reference/chat_groq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat with a model hosted on Groq — chat_groq","text":"system_prompt system prompt set behavior assistant. turns list Turns start chat (.e., continuing previous conversation). provided, conversation begins scratch. base_url base URL endpoint; default uses OpenAI. api_key API key use authentication. generally supply directly, instead set OPENAI_API_KEY environment variable. model model use chat. default, NULL, pick reasonable default, tell . strongly recommend explicitly choosing model casual use. seed Optional integer seed ChatGPT uses try make output reproducible. api_args Named list arbitrary extra arguments appended body every chat API call. echo One following options: none: emit output (default running function). text: echo text output streams (default running console). : echo input output. Note affects chat() method.","code":""},{"path":[]},{"path":"https://elmer.tidyverse.org/reference/chat_ollama.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat with a local ollama model — chat_ollama","title":"Chat with a local ollama model — chat_ollama","text":"use chat_ollama() first download install ollama. install models command line, e.g. ollama pull llama3.1 ollama pull gemma2. function lightweight wrapper around chat_openai() defaults tweaked ollama.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_ollama.html","id":"known-limitations","dir":"Reference","previous_headings":"","what":"Known limitations","title":"Chat with a local ollama model — chat_ollama","text":"Tool calling supported streaming (.e. echo \"text\" \"\") Tool calling generally seems quite weak, least models tried .","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_ollama.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat with a local ollama model — chat_ollama","text":"","code":"chat_ollama(   system_prompt = NULL,   turns = NULL,   base_url = \"http://localhost:11434/v1\",   model,   seed = NULL,   api_args = list(),   echo = NULL )"},{"path":"https://elmer.tidyverse.org/reference/chat_ollama.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat with a local ollama model — chat_ollama","text":"system_prompt system prompt set behavior assistant. turns list Turns start chat (.e., continuing previous conversation). provided, conversation begins scratch. base_url base URL endpoint; default uses OpenAI. model model use chat. default, NULL, pick reasonable default, tell . strongly recommend explicitly choosing model casual use. seed Optional integer seed ChatGPT uses try make output reproducible. api_args Named list arbitrary extra arguments appended body every chat API call. echo One following options: none: emit output (default running function). text: echo text output streams (default running console). : echo input output. Note affects chat() method.","code":""},{"path":[]},{"path":"https://elmer.tidyverse.org/reference/chat_openai.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat with an OpenAI model — chat_openai","title":"Chat with an OpenAI model — chat_openai","text":"OpenAI provides number chat based models ChatGPT moniker. Note ChatGPT Plus membership give ability call models via API. need go developer platform sign (pay ) developer account give API key can use package.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_openai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat with an OpenAI model — chat_openai","text":"","code":"chat_openai(   system_prompt = NULL,   turns = NULL,   base_url = \"https://api.openai.com/v1\",   api_key = openai_key(),   model = NULL,   seed = NULL,   api_args = list(),   echo = c(\"none\", \"text\", \"all\") )"},{"path":"https://elmer.tidyverse.org/reference/chat_openai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat with an OpenAI model — chat_openai","text":"system_prompt system prompt set behavior assistant. turns list Turns start chat (.e., continuing previous conversation). provided, conversation begins scratch. base_url base URL endpoint; default uses OpenAI. api_key API key use authentication. generally supply directly, instead set OPENAI_API_KEY environment variable. model model use chat. default, NULL, pick reasonable default, tell . strongly recommend explicitly choosing model casual use. seed Optional integer seed ChatGPT uses try make output reproducible. api_args Named list arbitrary extra arguments appended body every chat API call. echo One following options: none: emit output (default running function). text: echo text output streams (default running console). : echo input output. Note affects chat() method.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_openai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chat with an OpenAI model — chat_openai","text":"Chat object.","code":""},{"path":[]},{"path":"https://elmer.tidyverse.org/reference/chat_openai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chat with an OpenAI model — chat_openai","text":"","code":"if (FALSE) { # elmer:::openai_key_exists() chat <- chat_openai() chat$chat(\"   What is the difference between a tibble and a data frame?   Answer with a bulleted list \") }"},{"path":"https://elmer.tidyverse.org/reference/chat_perplexity.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat with a model hosted on perplexity.ai — chat_perplexity","title":"Chat with a model hosted on perplexity.ai — chat_perplexity","text":"Sign https://www.perplexity.ai. function lightweight wrapper around chat_openai() defaults tweaked groq.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_perplexity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat with a model hosted on perplexity.ai — chat_perplexity","text":"","code":"chat_perplexity(   system_prompt = NULL,   turns = NULL,   base_url = \"https://api.perplexity.ai/\",   api_key = perplexity_key(),   model = NULL,   seed = NULL,   api_args = list(),   echo = NULL )"},{"path":"https://elmer.tidyverse.org/reference/chat_perplexity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat with a model hosted on perplexity.ai — chat_perplexity","text":"system_prompt system prompt set behavior assistant. turns list Turns start chat (.e., continuing previous conversation). provided, conversation begins scratch. base_url base URL endpoint; default uses OpenAI. api_key API key use authentication. generally supply directly, instead set PERPLEXITY_API_KEY environment variable. model model use chat. default, NULL, pick reasonable default, tell . strongly recommend explicitly choosing model casual use. seed Optional integer seed ChatGPT uses try make output reproducible. api_args Named list arbitrary extra arguments appended body every chat API call. echo One following options: none: emit output (default running function). text: echo text output streams (default running console). : echo input output. Note affects chat() method.","code":""},{"path":"https://elmer.tidyverse.org/reference/chat_perplexity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chat with a model hosted on perplexity.ai — chat_perplexity","text":"Chat object.","code":""},{"path":[]},{"path":"https://elmer.tidyverse.org/reference/content_image_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode image content for chat input — content_image_url","title":"Encode image content for chat input — content_image_url","text":"functions used prepare image URLs files input chatbot. content_image_url() function used provide URL image, content_image_file() used provide image data .","code":""},{"path":"https://elmer.tidyverse.org/reference/content_image_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode image content for chat input — content_image_url","text":"","code":"content_image_url(url, detail = c(\"auto\", \"low\", \"high\"))  content_image_file(path, content_type = \"auto\", resize = \"low\")  content_image_plot(width = 768, height = 768)"},{"path":"https://elmer.tidyverse.org/reference/content_image_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode image content for chat input — content_image_url","text":"url URL image include chat input. Can data: URL regular URL. Valid image types PNG, JPEG, WebP, non-animated GIF. detail detail setting image. Can \"auto\", \"low\", \"high\". path path image file include chat input. Valid file extensions .png, .jpeg, .jpg, .webp, (non-animated) .gif. content_type content type image (e.g. image/png). \"auto\", content type inferred file extension. resize \"low\", resize images fit within 512x512. \"high\", resize fit within 2000x768 768x2000. (See OpenAI docs specific sizes used.) \"none\", resize. can also pass custom string resize image specific size, e.g. \"200x200\" resize 200x200 pixels preserving aspect ratio. Append > resize image larger specified size, ! ignore aspect ratio (e.g. \"300x200>!\"). values none require magick package. width, height Width height pixels.","code":""},{"path":"https://elmer.tidyverse.org/reference/content_image_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode image content for chat input — content_image_url","text":"input object suitable including ... parameter chat(), stream(), chat_async(), stream_async() methods.","code":""},{"path":"https://elmer.tidyverse.org/reference/content_image_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode image content for chat input — content_image_url","text":"","code":"if (FALSE) { # elmer:::openai_key_exists() chat <- chat_openai(echo = TRUE) chat$chat(   \"What do you see in these images?\",   content_image_url(\"https://www.r-project.org/Rlogo.png\"),   content_image_file(system.file(\"httr2.png\", package = \"elmer\")) )  DONTSHOW({dev.control('enable')}) plot(waiting ~ eruptions, data = faithful) chat <- chat_openai(echo = TRUE) chat$chat(   \"Describe this plot in one paragraph, as suitable for inclusion in    alt-text. You should briefly describe the plot type, the axes, and    2-5 major visual patterns.\",    content_image_plot() ) }"},{"path":"https://elmer.tidyverse.org/reference/create_tool_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Create metadata for a tool — create_tool_def","title":"Create metadata for a tool — create_tool_def","text":"order use function tool chat, need craft right call tool(). function helps documented functions extracting function's R documentation creating tool() call , using LLM. meant used interactively writing code, part final code. function package documentation, used. Otherwise, source code function can automatically detected, comments immediately preceding function used (especially helpful Roxygen comments). neither available, just function signature used. Note function inherently imperfect. handle possible R functions, parameters suitable use tool call (example, serializable simple JSON objects). documentation might specify expected shape arguments level detail allow exact JSON schema generated. Please sure review generated code using !","code":""},{"path":"https://elmer.tidyverse.org/reference/create_tool_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create metadata for a tool — create_tool_def","text":"","code":"create_tool_def(topic, model = \"gpt-4o\", echo = interactive(), verbose = FALSE)"},{"path":"https://elmer.tidyverse.org/reference/create_tool_def.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create metadata for a tool — create_tool_def","text":"topic symbol string literal naming function create metadata . Can also expression form pkg::fun. model OpenAI model use generating metadata. Defaults \"gpt-4o\", highly recommended \"gpt-4o-mini\". echo Emit registration code console. Defaults TRUE interactive sessions. verbose TRUE, print input send LLM, may useful debugging unexpectedly poor results.","code":""},{"path":"https://elmer.tidyverse.org/reference/create_tool_def.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create metadata for a tool — create_tool_def","text":"register_tool call can copy paste code. Returned invisibly echo TRUE.","code":""},{"path":"https://elmer.tidyverse.org/reference/create_tool_def.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create metadata for a tool — create_tool_def","text":"","code":"if (FALSE) { # \\dontrun{   # These are all equivalent   create_tool_def(rnorm)   create_tool_def(stats::rnorm)   create_tool_def(\"rnorm\") } # }"},{"path":"https://elmer.tidyverse.org/reference/elmer-package.html","id":null,"dir":"Reference","previous_headings":"","what":"elmer: Call LLM APIs from R — elmer-package","title":"elmer: Call LLM APIs from R — elmer-package","text":"consistent interface calling LLM APIs. Includes support streaming.","code":""},{"path":[]},{"path":"https://elmer.tidyverse.org/reference/elmer-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"elmer: Call LLM APIs from R — elmer-package","text":"Maintainer: Hadley Wickham hadley@posit.co contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://elmer.tidyverse.org/reference/interpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for interpolating data into prompts — interpolate","title":"Helpers for interpolating data into prompts — interpolate","text":"functions lightweight wrappers around glue make easier interpolate dynamic data static prompt. Compared glue, functions expect wrap dynamic values {{ }}, making easier include R code JSON prompt.","code":""},{"path":"https://elmer.tidyverse.org/reference/interpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers for interpolating data into prompts — interpolate","text":"","code":"interpolate(prompt, ..., .envir = parent.frame())  interpolate_file(path, ..., .envir = parent.frame())"},{"path":"https://elmer.tidyverse.org/reference/interpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers for interpolating data into prompts — interpolate","text":"prompt prompt string. generally expose end user, since glue interpolation makes easy run arbitrary code. ... Define additional temporary variables substitution. .envir Environment evaluate ... expressions . Used wrapping another function. See vignette(\"wrappers\", package = \"glue\") details. path path prompt file (often .md).","code":""},{"path":"https://elmer.tidyverse.org/reference/interpolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helpers for interpolating data into prompts — interpolate","text":"","code":"joke <- \"You're a cool dude who loves to make jokes. Tell me a joke about {{topic}}.\"  # You can supply valuese directly: interpolate(joke, topic = \"bananas\") #> You're a cool dude who loves to make jokes. Tell me a joke about bananas.  # Or allow interpolate to find them in the current environment: topic <- \"applies\" interpolate(joke) #> You're a cool dude who loves to make jokes. Tell me a joke about applies."},{"path":"https://elmer.tidyverse.org/reference/live_console.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a live chat application — live_console","title":"Open a live chat application — live_console","text":"live_console() lets chat interactively console. live_browser() lets chat interactively browser. Note functions mutate input chat object chat turns appended history.","code":""},{"path":"https://elmer.tidyverse.org/reference/live_console.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a live chat application — live_console","text":"","code":"live_console(chat, quiet = FALSE)  live_browser(chat, quiet = FALSE)"},{"path":"https://elmer.tidyverse.org/reference/live_console.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a live chat application — live_console","text":"chat chat object created chat_openai() friends. quiet TRUE, suppresses initial message explains use console.","code":""},{"path":"https://elmer.tidyverse.org/reference/live_console.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open a live chat application — live_console","text":"(Invisibly) input chat.","code":""},{"path":"https://elmer.tidyverse.org/reference/token_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Report on token usage in the current session — token_usage","title":"Report on token usage in the current session — token_usage","text":"Call function find cumulative number tokens sent recieved current session.","code":""},{"path":"https://elmer.tidyverse.org/reference/token_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report on token usage in the current session — token_usage","text":"","code":"token_usage()"},{"path":"https://elmer.tidyverse.org/reference/tool.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a tool — tool","title":"Define a tool — tool","text":"Define R function use chatbot. function always run current R instance. Learn vignette(\"tool-calling\").","code":""},{"path":"https://elmer.tidyverse.org/reference/tool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a tool — tool","text":"","code":"tool(.fun, .description, ..., .name = NULL)"},{"path":"https://elmer.tidyverse.org/reference/tool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a tool — tool","text":".fun function invoked tool called. .description detailed description function . Generally, information can provide , better. ... Name-type pairs define arguments accepted function. element created type_*() function. .name name function.","code":""},{"path":"https://elmer.tidyverse.org/reference/tool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a tool — tool","text":"","code":"if (FALSE) { # elmer:::openai_key_exists()  # First define the metadata that the model uses to figure out when to # call the tool tool_rnorm <- tool(   rnorm,   \"Drawn numbers from a random normal distribution\",   n = type_integer(\"The number of observations. Must be a positive integer.\"),   mean = type_number(\"The mean value of the distribution.\"),   sd = type_number(\"The standard deviation of the distribution. Must be a non-negative number.\") ) chat <- chat_openai() # Then register it chat$register_tool(tool_rnorm)  # Then ask a question that needs it. chat$chat(\"   Give me five numbers from a random normal distribution. \")  # Look at the chat history to see how tool calling works: # Assistant sends a tool request which is evaluated locally and # results are send back in a tool result. }"},{"path":"https://elmer.tidyverse.org/reference/type_boolean.html","id":null,"dir":"Reference","previous_headings":"","what":"Type specifications — type_boolean","title":"Type specifications — type_boolean","text":"functions specify object types way chatbots understand used tool calling structured data extraction. names based JSON schema, APIs expect behind scenes. translation R concepts types fairly straightforward. type_boolean(), type_integer(), type_number(), type_string() represent scalars. equivalent length-1 logical, integer, double, character vectors (respectively). type_enum() equivalent length-1 factor; string can take specified values. type_array() equivalent vector R. can use represent atomic vector: e.g. type_array(items = type_boolean()) equivalent logical vector type_array(items = type_string()) equivalent character vector). can also use represent list complicated types every element type (R base equivalent ), e.g. type_array(items = type_array(items = type_string())) represents list character vectors. type_object() equivalent named list R, every element must specified type. example, type_object(= type_string(), b = type_array(type_integer())) equivalent list element called string element called b integer vector.","code":""},{"path":"https://elmer.tidyverse.org/reference/type_boolean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type specifications — type_boolean","text":"","code":"type_boolean(description = NULL, required = TRUE)  type_integer(description = NULL, required = TRUE)  type_number(description = NULL, required = TRUE)  type_string(description = NULL, required = TRUE)  type_enum(description = NULL, values, required = TRUE)  type_array(description = NULL, items, required = TRUE)  type_object(   .description = NULL,   ...,   .required = TRUE,   .additional_properties = FALSE )"},{"path":"https://elmer.tidyverse.org/reference/type_boolean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type specifications — type_boolean","text":"description, .description purpose component. used LLM determine values pass tool values extract structured data, detail can provide , better. required, .required component required? FALSE, component exist data, LLM may hallucinate value. applies element nested inside type_object(). values Character vector permitted values. items type array items. Can created type_ function. ... Name-type pairs defineing components object must possess. .additional_properties Can object arbitrary additional properties explicitly listed? supported Claude.","code":""},{"path":"https://elmer.tidyverse.org/reference/type_boolean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Type specifications — type_boolean","text":"","code":"# An integer vector type_array(items = type_integer()) #> <elmer::TypeArray> #>  @ description: NULL #>  @ required   : logi TRUE #>  @ items      : <elmer::TypeBasic> #>  .. @ description: NULL #>  .. @ required   : logi TRUE #>  .. @ type       : chr \"integer\"  # The closest equivalent to a data frame is an array of objects type_array(items = type_object(    x = type_boolean(),    y = type_string(),    z = type_number() )) #> <elmer::TypeArray> #>  @ description: NULL #>  @ required   : logi TRUE #>  @ items      : <elmer::TypeObject> #>  .. @ description          : NULL #>  .. @ required             : logi TRUE #>  .. @ properties           :List of 3 #>  .. .. $ x: <elmer::TypeBasic> #>  .. ..  ..@ description: NULL #>  .. ..  ..@ required   : logi TRUE #>  .. ..  ..@ type       : chr \"boolean\" #>  .. .. $ y: <elmer::TypeBasic> #>  .. ..  ..@ description: NULL #>  .. ..  ..@ required   : logi TRUE #>  .. ..  ..@ type       : chr \"string\" #>  .. .. $ z: <elmer::TypeBasic> #>  .. ..  ..@ description: NULL #>  .. ..  ..@ required   : logi TRUE #>  .. ..  ..@ type       : chr \"number\" #>  .. @ additional_properties: logi FALSE  # There's no specific type for dates, but you use a string with the # requested format in the description (it's not gauranteed that you'll # get this format back, but you should most of the time) type_string(\"The creation date, in YYYY-MM-DD format.\") #> <elmer::TypeBasic> #>  @ description: chr \"The creation date, in YYYY-MM-DD format.\" #>  @ required   : logi TRUE #>  @ type       : chr \"string\" type_string(\"The update date, in dd/mm/yyyy format.\") #> <elmer::TypeBasic> #>  @ description: chr \"The update date, in dd/mm/yyyy format.\" #>  @ required   : logi TRUE #>  @ type       : chr \"string\""},{"path":"https://elmer.tidyverse.org/news/index.html","id":"elmer-development-version","dir":"Changelog","previous_headings":"","what":"elmer (development version)","title":"elmer (development version)","text":"New Chat$set_turns() set turns. Chat$turns() now Chat$get_turns(). Chat$system_prompt() replaced Chat$set_system_prompt() Chat$get_system_prompt(). Async streaming async chat now event-driven use later::later_fd() wait efficiently curl socket activity (#157). New chat_bedrock() chat AWS bedrock models (#50). New chat$extract_data() uses structured data API available (tool calling otherwise) extract data structured according known type specification. can create specs functions type_boolean(), type_integer(), type_number(), type_string(), type_enum(), type_array(), type_object() (#31). general ToolArg() replaced specific type_*() functions. ToolDef() renamed tool. content_image_url() now create inline images given data url (#110). Streaming ollama results works (#117). Streaming OpenAI results now capture results, including logprops (#115). New interpolate() prompt_file() make easier create prompts mix static text dynamic values. can find many tokens ’ve used current session calling token_usage(). chat_browser() chat_console() now live_browser() live_console(). echo can now one three values: “none”, “text”, “”. “”, ’ll now see user assistant turns, content types printed, just text. running global environment, echo defaults “text”, running inside function defaults “none”. chat$register_tool() now takes object created Tool(). makes little easier reuse tool definitions (#32). new_chat_openai() now chat_openai(). Claude Gemini now supported via chat_claude() chat_gemini(). Snowflake Cortex Analyst now supported via chat_cortex() (#56).","code":""}]
